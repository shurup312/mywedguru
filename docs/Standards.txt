Разработка в целом
1. Используйте utf-8 кодировку на страницах
2. Отдельная задача в отдельной ветке, в refactoring лью только я
3. Названия моделей в единственном числе, таблиц - во множественном числе
4. Все стат.значения в таблицах прописаны константами в моделях. Списки с именованиями там же.
5. Если не получается за час, то пишем в общий чат.
6. Используйте понятные названия переменных
   $hdu58 --- неверно
   $userName --- верно
7. Комментируйте каждую свою функцию, чтобы сразу было понятно, что за что отвечает
8. Верстка строится по следующему принципу
• Страница делится на блоки информации (допустим меню, блок вывода пользователей, блок поиска, хедер страницы и т.д.)
• Каждый блок заключается в див, этому диву проставляется осмысленный класс, анзвание которого соответствует назначению дива, например listUsers и прочее.
• Упрощенный вариант БЭМ. Все стили вложенных элементов должны быть вынесены в классы, имена которых имеют вид {parentElementClass_{childName}}, допустим
<div class='nav'>
	<div class='nav_search'></div>
</div>
Таким образом каждая страница будет иметь свой файл стилей, в котором классы будут разбиты по префиксам соответствующих элементов.
• Файлы дизайнов так же должны иметь свой файл стилей. Он должен находиться в
www/templates/{templateName}/css/layout.css
• Дизайн так же должен состоять из логических блоков, заключенных в дивы с соответствующими именами классов.
• Классы блоков дизайна должны именоваться по принципу layout_{blockName}_{otherCharacters}
Все написанное выше касается и ID элементов.
Для более быстрого создания классов можно использовать alt+Enter.
9. Избегайте любого дублирования кода
10. Не делайте изменений напрямую в библиотеках js и файлах css, создавайте свои стили которые будут использоваться
 на вашей странице.
11. Не допускается при сдаче задачи рекурсивный говнокод.
12. Проверяйте свои страницы на маленьких мониторах и экранах!
13. Строго соблюдаем иехархию отступов в разметке
14. Имена классов начинаются с заглавной буквы. Namespace пишутся только строчными буквами.
JS
1. Не оставляйте на страницах на которых работаете, ошибок в консоли
2. Разработка в JS более менее понятная (на уровне создания объектов и вызова у них init)
3. Все js файлы виджетов, плагинов и т.д. в папке www/vendor/. Поключаться должны через bower. Если непонятно как, то лучше постучать Олегу.
4. js файлы, относящиеся к конкретной странице должны быть вынесены в отедльный файл, который будет располагаться  в
www/public/components/{имя_компонента}/js
5. Допускается на одну страницу подключать js или css файлы другой страницы во избежание дублирования кода.
6. Избегайте onclick, используйте лучше $('#test').click(function(){ ... });

CSS
1. Css файлы, относящиеся к конкретной странице должны быть вынесены в отедльный файл, который будет располагаться  в
www/public/components/{имя_компонента}/css
2. Допускается на одну страницу подключать js или css файлы другой страницы во избежание дублирования кода.
3. Старайтесь не использовать !important в CSS
4. Все классы и идентификаторы в нижнем регистре за исключением ситуации, когда они пишутся составными (в camelCase, например userPanel)

CSS&JS
Подключение делать только через Assets'ы

PHP
1. Используем одинарные кавычки, а не двойные
2. Делаем отступы табами
3. Код пишем по старнарту PSR-1, PSR-2
4. Массивы в [] и заканчиваться каждая строка должна запятой
5. Методы возвращают или объект или простые типы (число, строка, булеан)
6. Не использовать die на продакшене.
7. Не использовать @ на продакшене.
8. Все запросы должны быть только в сервисах.
9. В файлах должны либо объявляться классы, константы, методы, либо вызываться побочные действия (например генерировать вывод данных), но не должно происходить и то и другое одновременно.
10. Названия  методов должны быть в виде camelCase, когда каждое следующее слово названия метода начинается с заглавной буквы

HTML
1. Если Вы работаете с вёрсткой, то открывайте свою страницу как минимум в трёх современных браузерах (Opera, Chrome, Firefox)
2. Пишите сразу верные meta & title, в начале html страницы не забывайте писать <!DOCTYPE html>

MySQL
1. В БД поля типа bool должны начинаться с is_, can_, exists_ чтобы однозначно обозначать принадлежность
2. Utf8_general_ci в базах для всех текстовых полей
3. Для полей, содержащих дату использовать тип timestamp, название поля должно начинаться с date_{действие в прошедшем числе} (date_created)
