Создание форм происходит созданием класса, описывающего форму.
Сам класс кладется в модуле в папку Forms, файл называется {название формы}Form.php.
Например, PagesForm. Класс наследуется от класса system\core\base\Form и реализует публичный метод elements
class PagesForm extends Form
{
	public function elements()
	{
	...
	}
	...

Метод возвращает массив описанных элементов формы. Пример возвращаемого массива
return [
    'menu_name'        => [
        'type'       => InputTag::className(),
        'label'      => 'Название в меню',
        'attributes' => [
            'type'      => 'text',
            'name'      => 'menu_name',
            'required'  => 1,
            'maxlength' => '255',
            'class'     => 'form-control',
        ],
    ],
    'title'            => [
        'type'       => InputTag::className(),
        'label'      => 'Название',
        'attributes' => [
            'type'      => 'text',
            'name'      => 'title',
            'required'  => 1,
            'maxlength' => '255',
            'class'     => 'form-control',
        ],
    ],
    'content'          => [
        'type'       => TextareaTag::className(),
        'label'      => 'Текст',
        'attributes' => [
            'type'      => 'text',
            'name'      => 'content',
            'required'  => 1,
            'maxlength' => '65535',
            'class'     => 'form-control',
            'rows'      => '5',
        ],
    ],

название ключа в этом массиве - идентификатор элемента, он после будет нужен для возможности вывода отдельного элемента
описанной формы на странице.
Далее, каждый элемент должен содержать параметры
(Tag) type - имя класса, описывающего нужный для вывода элемент
(string) label - заголовок элемента в форме
(array) attributes - массив аттрибутов элемента. то есть те параметры, что будут выведены в тэге самого элемента в Html.
На данный момент доступны классы, описывающие следующие элементы:
InputTag - класс, описывающий input
FormTag - класс, описываюий тэг form
TextareaTag - класс, описывающий textarea тэг.
Разберемся, как применять формы в общем.
1. Создаем класс, описывающий форму, для примера

<?php
namespace webapp\modules\pages\forms;

use system\core\base\Form;
use system\core\HTML\InputTag;

/**
 * Class PagesForm
 */
class PagesForm extends Form
{

	public function elements()
	{
		return [
			'menu_name'        => [
				'type'       => InputTag::className(),
				'label'      => 'Название в меню',
				'attributes' => [
					'type'      => 'text',
					'name'      => 'menu_name',
					'required'  => 1,
					'maxlength' => '255',
					'class'     => 'form-control',
				],
			],
			'submit'           => [
				'type'       => InputTag::className(),
				'label'      => '',
				'attributes' => [
					'type'  => 'submit',
					'value' => 'Сохранить',
					'class' => 'btn btn-success',
				],
			],
		];
	}
}


2. Инициализиуем калсс формы в Controller
$formName = 'formName';
$form     = new PagesForm($formName);
...
return $this->render('...',['form'=>$form]);
3. Выводим саму форму во view
<?=$form->getForm();?>

4. В контроллере заполнить форму для повторного показа в случае ошибки ее валидации можно следующим образом
if ($post = App::request()->post($formName)) {
    $form->load($post);
}
Таким образом при повторном показе форма будет уже заполнена.

5. У самой формы можно перед выводом задать шаблон вывода элементов
$form->setTemplate('<div class="form-group {error-class}"><label for="name">{label}</label>{element}</div>');

Ну и помимо всего прочего, можно выводить не форму целиком, а отдельные ее элементы в случае, если нужен ывод каждого элемента в "своем" дизайне
Во view можно реализовать это следующим образом

<?=
$form->open(
	[
		'method' => 'post',
		'role'   => 'form',
	]
); ?>
<div class="col-xs-6">
	<?= $form->getElement('menu_name'); ?>
</div>
<div class="row">
	<div class="col-xs-12">
		<?= $form->getElement('submit'); ?>
	</div>
</div>
<?= $form->close() ?>

Сам объект формы представляе собой стандартный объект, у котого есть свойства, одноименные с аданным для каждог элемента аттрибутом name
Для примера, в приведенном выше примере при описании элементов для первого элемента задан аттрибут name "menu_name"
Значит к нему можно обратиться просто как $form->menu_name в контроллере или view
Чтобы было более понятно, пример кода

$formName = 'formName';
$form     = new PagesForm($formName);
if ($post = App::request()->post($formName)) {
    $form->load($post);
    $menuName = $form->menu_name;
    ...

С другой стороны, у submit'а в описании не задан аттрибут name, поэтому объект $form не обладает никаким свойством, в котором бы
было значение этого элемента, так как фактически этот элемент при отправке никакого значения и не отправит.


