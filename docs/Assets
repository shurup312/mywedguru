При работе с фронтэкн-частью сайты мы постоянно сталкиваемся с необходимость подключать файлы css и js.
В дизайн следует вставлять не большое количество действительно необходимых файлов. Иначе дизайн перегружается количеством
Включаемых css и js файлов, которые возможно используются на одной или двух страницах, при этом загружаются каждый раз.
Именно поэтому следуюет большинство js и css файлов подключать при вызове view файла. Но опять же, писать в каждом view файле листовку включений
некрасиво и путано. Можно не учесть, что какой-то плагин зависит от другого и забыть его включить. Или же перестать использовать
какой-то плагин на странице, но не убрать его из списка подключаемых просто потому, что подключаемых файлов млного и лениво разбираться что
там от чего зависит и что надо отключить чтобы не сломать остального.
Чтобы изжежать всего этого реализованы ресурсы (assets).
Если вам необходимо подключить один плагин (например dataTables.jquery.js), мы делаем для него описание, какие css и js файлы
он должен подключать и от каких модулей он зависит.
Итак, создаем класс DataTablesAsset и наследуем его от \system\core\Asset
В публичном методе класса package() указываем подключаемые css и js файлы в виде массива.
	public function package()
	{
		return [
			'js'  => [
				'/vendor/datatables/media/js/jquery.dataTables.js',
				'/vendor/jquery.dataTables.columnFilter/index.js',
			],
			'css' => [
				'/vendor/datatables/media/css/jquery.dataTables.min.css',
			],
		];
	}
Далее, у нас плагин зависит от jQuery, предположим, что на jQuery уже есть asset-файл.Тогда достаточно указать, что DataTablesAsset заивисит от
JQueryAsset, и что его необходимо загрузить прежде, чем мы будем загружать текущий плагин.
Это делается в публичном методе класса dependency()
	public function dependency()
	{
		return [
			'\assets\JQueryAsset',
		];
	}
Метод возвращает массив строковых значений namespac'ов файлов, которые должны быть загружены.
Чтобы сделать класс более поддерживаемым, лучше писать
public function dependency()
{
    return [
        \assets\JQueryAsset::className(),
    ];
}
или же
return [
    JQueryAsset::className(),
];
Если у текущего и у подключаемого asset-классов одинаковые namespace.

Само подключение DataTables плагина с учетом его зависимостей происходит крайне просто
Во view файла (или в экшене контроллера, который отвечает за нужную страницу) всего ли пишем

DataTablesAsset::init();

И мы уверены, что теперь у нас удачно подключен плагин и все нужные для его работы зависимости.
При подключении большого количества плагинов рекомендуется сделать asset-файл в папке модуля в подпапке assets. И там в
dependency указать все, что надо подключить. Таким образом в контроллере надо будет подключить один asset-класс вместо 10 asset-файлов
плагинов/библиотек/наворотов.

